<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIjQAAAEAGADoFgAAFgAAACgAAAAiAAAAaAAAAAEAGAAAAAAAAAAAAEgAAABIAAAAAAAAAAAA
        AACgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcT6gcECecEGeckScdEeuhmWof1yof1qc
        b0OfcESecD+fcT6gcD+gcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQKBwQKBwQKBwQKBwQJ1yQ66Nc8i0rNLDwdDHxNDGxc3Cw8O5u7ixsbipq6uUjZ14WZxwP6Bw
        QKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBA
        oHBApXxWwra31cvL29PT1c/Q19LR0s7QwMLFycTFysLFr6itp5aYoHFEoHBAoHBAoHBAoHBAoHBAoHBA
        oHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgc0bRxMDKwsPHwsO8
        uLnBvr66trmnp6u3s7Wvqq6moqasm5aecD+gcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcKBw
        QKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQJ9wQLOUf7OsrcXCw8rIycXGxsTCw766u6mmqpqU
        m5iOkaN+Xp9xPqBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBA
        oHBAoHBAoHBAoHBAoHBAnnA/tJeDt7KzzcXGvbq6w7+/ycDAzMLCqaGmn5qfq6GhnXJJn3E/oHBAoHBA
        oHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECe
        cT+iek61qKHTysvAvL3KwcLLwMLQxce1qa+ek5WfdU2gb0CgcECgcECgcECgcECgcECgcECgcECgcECg
        cECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwP7GUf8/Dxby3uMu9
        v8W4usS8vruxs5F4b55wQKFwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBA
        oHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHA/sZSDt7CxtLKzz8LEzsLDv7e4urCxiWhgpnlW
        nnBAoHA/oHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcECg
        cECgcECgcECgcECgcECeckbTv7yspqm0rbHKvb/HurukmJibi4qmlZmnkIifdlCfcT6gcECgcECgcECg
        cECgcECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQJ9xP6+N
        d9fIyrKtsbGorryvsbKoqcW9vrawsLKtsrChn59xSaBwP6BwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAnnE/rZeOxLm7rKOlmouOqpyfyMLD
        xsHCubS2r6ivq5uanm5DoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECg
        cECgcECgcECgcECgcECgcECgcECgcECecT7BqJq8sbO2sbSypKS3sbLGwMHHwcK6tLmvqK2pkYqgcD+g
        cECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQJ5xPrOTeLuztrq6vdTP0cHBw83Fx8nAwsG7wK6oraONg59wQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAonRJsIttw7q+
        tLO4ysfLycPIxLm8vrO1x8DFs66zoouFnm9BoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBA
        oHCgcECgcECgcECgcECgcECgcECdcECccECgdkifcT6dckTGuLS5mpLKwMS5trrCv8PKwMXQyczTy83A
        ucCtp7CeiYidb0OgcECgcECdcD+idkuheEydcT6gcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBw
        QKBwQJ1yQreQcbWQdJtwQKV/WbewsrSko8/EycG8v8C9wszHzMG/wszExru0u6ymraSWm55xR6BwQKBw
        QJ5xQbmag6yDZKFwP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAnXE+tZF3u5R+nXBA
        uZJ0xMLGtqKgz8TIzcXGv77DxMHFz8fMxr/EvLW8raqvo5Wbn3NKoHBAoHBAnXE+vZyAo3lQn3E/oHBA
        oHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcD6ogV+sh2edcT+rhWLY0tK0mpHQxsnTysu5
        uL3Px8rGvsDHwcO8truwq7GpmqCdcEagcECgcECidUatgWWpglmfcT+gcECgcECgcECgcECgcECgcKBw
        QKBwQKBwQKBwQKBwQKBwQJ9wQbeQebWUeZ5xQKF2R97Sz7SXkMO9wtXLzL++w9TR0dLMzc7Iyb+5vrKt
        s6qcoZ5xR6BwQKBwQJ5vQb6UgKF4UqBxP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBA
        nXI8p3tSnnRFnnE+nXFD4M/Nv6inwLa70cvQx8bJ1NDQ2dLT08zNy8bIr620pqCjk29Tn3E+oHBAoHBB
        roZoo3pWn3A/oHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECecEGxhmi7l3yfc0KdcUTk
        0dC3qarLwMbLyc7LyMzd09XRxcfIwMHIw8SzsLeupqubfHGfcT6gcECkdkW4lHusgmKfcT+gcECgcECg
        cECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQKFxQr+eiriZgZ5xP51xROfU0r+4vNXIzsvJzc3KzdjN
        z+LW2NjT1MnExrezurmvt6GLhJ9vQaBwQKBxQcajkLCFZZ9wQKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBA
        oHBAoHBAoHBAoHBAn3E+onJLtY5toXNCnHFE6tbVzcTF1szO1MzOzczM3NbX2tPT4NnZzMfLwbvAvbe8
        p5aXnHBIoHBAnnI/nXNJm3FCoHE+oHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcD+2
        kHq6lYCgcT2ccUPt2djTy8va0tPh2NnKysvY09XZ1NXZ1tXKxcrGwsbDvsOspKqac16fcD+icUG9noip
        flifcT6gcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQJ9xP66FZrSUdZ1xPpxwQunV09zU
        1M7HyOzl5LCws7GwtrawtbOusbe2usPCxsLBxbWzt6SOjptxP55zPKuHYKFzSZ5wQKBwQKBwQKBwQKBw
        QKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAnnA/roNhr4lnn3E+oHJH2MfHzMzOrK6y4Nzdz83OvLm+trK3
        rKKpvL7CzMrNxsjMwMTHu7y/oXpPoHFCtYlpo3ZNnnA/oHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECg
        cECgcECgcECgcEC0kHG3lXmgcT2kgGzMxMbKyc2ur7TV0NHHxse4ur7Dwse9vcK5wsXP09TCys25vsG4
        uLmdckegckO/mYSrfFiecT+gcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQJ1wQJ91Q6Fz
        SpxyPbmReb23u7Wxut7b2czLzejk4M7U1M7S1cfLzs7Q0MnOzdTX1s/M0Lqrp55wQJ9wQKN1TqB0Rp5x
        P6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAnnE+q4Bls5V4nXI9tYxx0cfLra6y9O/m
        09TT4+Lf3uLf2Nva29/e4uLgx8nKxcnKx8jLsJqQn3BAn3REso9wondNn3BAoHBAoHBAoHBAoHBAoHBA
        oHCgcECgcECgcECgcECgcECgcECfcEG0jnGuh2iecT+gdkrw4+DIycvd29rW2dfc397Y3NzV2trX3Nvg
        497HysvGy87JysupjnugcECecT6yjm6gdUigcECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBw
        QKBwQKBwP55vQaR4Tp5wQJ9wQNrBtuzm49LX1dfZ2d3h4d/i4N7e2OLn5drg3snLytDQ0MfHyaaCZKBw
        QJ9yRLCDX59ySJ9wP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAn3BArYRftZJyn3BA
        oHBAxKKI9e7n4eDe3dzb19na3NzZ6+rk09jW0tjXztDP2djYwcDAonVNoHBAnnBDvJF7tY1wn3BAoHBA
        oHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECecEGccUOjeU2gcECgcECme1Py5d3m5d/27und
        2djz6uP37OPt5uHV19XU09LT09O8rKCfcD+gcEChcECleFCneVOecD+gcECgcECgcECgcECgcECgcKBw
        QKBwQKBwQKBwQKBwQKBwQJ9wQrqUf7eWfKByQ6BwQKBwQL+eg+Lf3Pnw597a2Pbu5PPq4uDe2crMzdDN
        zsS8uaR9WZ9xP6BwQJ9yRLeOdq2FYZ9wP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBA
        oHNEsY10sYlln3BBoHBAoHBAoHA/s41x1b6wraurxsLEuLO2l5udu7Wyqo54n3RHoHBAoHBAoHBAnXBA
        uY1xrYZhoHA/oHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECickOickuogFeickWgcECg
        cECgcECgcECidU3FrKPb0tLRycy9truce1yecUGgcECgcECgcECgcECgdUauh2auhWCgb0CgcECgcECg
        cECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQJ1wQsWhj7iUeqBwP6BwQKBwQKBwQJ9vP8mtm+PU1ejf
        3c7IycvIy7Our6R8V6BwQKBwQKBwQKBwQKNySMGdjrmRdJ9xP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBA
        oHBAoHBAoHBAoHBAnXBApHxXsY9woHA/oHBAoHBAoHBAoHBAvqaT59zX4t7Z3NrYyMjIsq2xonpToHBA
        oHBAoHBAoHBAoHA/oXhNqH9WnXBAoHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcEChc0K1
        kXa2l32fcT+gcECgcECfcD+ecEDIu7Hs5eDs6uLh3tvU0dCztbmlgGGgcECgcECgcECgcECmdEu+nIO1
        kG2ecECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQJ9wP7yYfbaTeJ9wP6BwQKBwQJ5x
        P51wQMnDvOnp5Orq5Ojn5NTU1LW7v6WJbKBwQKBwQKBwQKBwQKBwP7ybgqp+WZ5xPqBwQKBwQKBwQKBw
        QKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHFCpHhGn3BBoHBAoHBAn3BAnXBAyMe70+De1OLg1d/g
        vs/Qs8PFoYJfoHBAoHBAoHBAoHBAn29Bn3dJnHBAnnE+oHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECg
        cECgcECgcECgcECgcECfcEGfcECgcECgcECgcD+gcECwkXLP3dvP39vF1dS90NCzsaifcEGgcECgcECg
        cECgcECgcD+gcECecT6fcECgcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQKBwQKBwQKBwQKBwP7GVe87Wz8HQzrWyp594TJ9wP6BwQKBwQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAn3BAnnE/oHBAoHBAoHBA
        oHBAoHBAonlOqXxYoXBEn3E/n3E/oHBAoHBAoHBAoHBAnXE/nHI+oHBAoHBAoHBAoHBAoHBAoHBAoHBA
        oHCgcECgcECgcECgcECgcECgcECgcECecUCqflSrh1+ccT+keE2qgluogVmoelGld06tiWyhc0KidUSu
        imafcUCleU6jdUujdUiecUGlflSviWOlek6fcD+gcECgcECgcECgcECgcECgcKBwQKBwQKBwQKBwQKBw
        QKBwQJ9wQKiAWcKpl7+kkbCKZsSrlb+lj6V9UraOccKhksKkkaF2Sb+jibWRdp5xQ7KLbcarnbKMbp1w
        Q76jjr2bhbaUcJ9xP6BwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBAoHBAnnBAsI1yya+f
        pHhOuZ2Cv5uFn3NGrIVjtI51tZB1n3hOup+KspF4pXhKnnRHw6iUp39ToHA/uJp7vaCEo3VIoHBAoHBA
        oHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcECgcECfcD+hdEagcECfcT6ecECccT+ecT6f
        cT6fcT+gcECdcT6fcECecD+dcT+fcUCfcECgcECkeEmhd0ugcECgcECgcECgcECgcECgcECgcECgcKBw
        QKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBw
        QKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwQKBwoHBAoHBAoHBAoHBAoHBAoHBA
        oHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBA
        oHBAoHBAoHBAoHBAoHBAoHBAoHBAoHBAoHCgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECg
        cECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECgcECg
        cECgcECgcECgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA
</value>
  </data>
</root>